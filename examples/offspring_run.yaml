# Offspring Mode Run Configuration
# ==================================
# Generate children from multiple parents via crossover + mutation.
#
# This mode is useful for:
# - Combining features from multiple good layouts
# - Multi-generation evolutionary optimization
# - Exploring the solution space through recombination
#
# Usage:
#   python3 ga_cli.py examples/offspring_run.yaml

mode: "offspring"

# Input: Multiple parents (use either manifest or directory)
input:
  # OPTION 1: Parent manifest with scores/weights (recommended)
  # Allows weighted parent selection based on external fitness
  # parents_manifest: "parents.csv"
  #
  # Sample manifest file format (parents.csv):
  #   id,path,score,weight
  #   variant_003,ga_output/variants/variant_003.csv,0.89,2.0
  #   variant_007,ga_output/variants/variant_007.csv,0.92,3.0
  #   parent_001,output/placement_final.csv,0.85,1.0
  #
  # Fields:
  #   - id: Unique identifier for the parent
  #   - path: Path to parent CSV file (relative or absolute)
  #   - score: External fitness score (optional, for reference)
  #   - weight: Selection probability (higher = more likely chosen)

  # OPTION 2: All CSVs from a directory (uncomment to use)
  # All CSVs will be loaded with equal weight
  parents_dir: "tmp/"

  # NOTE: Specify EITHER parents_manifest OR parents_dir, not both

# Output configuration
output:
  root: "ga_output/generation_001"
  # If this directory exists, set overwrite to true
  overwrite: true

# Generation parameters
generation:
  # Number of children to generate via crossover + mutation
  children: 10

  # Number of fresh random layouts to generate for diversity (optional)
  # These are created using the existing PlacementEngine
  # Set to 0 or omit if you don't want immigrants
  immigrants: 5

# GA configuration file paths (optional, defaults shown)
ga_config: "ga_ext/ga_ext_config.yaml"
placement_config: "config.yaml"

# Random seed for reproducibility (optional)
# Set to integer for reproducible results, null for random
random_seed: 42

# Visualization (optional)
# Generate comprehensive multi-panel plots for each child/immigrant
visualization:
  enabled: true  # Set to true to generate plots alongside CSVs
  # figure_size: [16, 12]  # Optional, uses config.yaml default if omitted

# ============================================================================
# Parent Manifest Format (if using parents_manifest)
# ============================================================================
# Create a CSV file with the following format:
#
#   id,path,score,weight
#   variant_003,ga_output/variants/variant_003.csv,0.89,2.0
#   variant_007,ga_output/variants/variant_007.csv,0.92,3.0
#   parent_001,output/placement_final.csv,0.85,1.0
#
# Required columns:
# - id: Unique identifier for the parent (e.g., "variant_003", "parent_001")
# - path: Path to parent layout CSV (relative or absolute)
#
# Optional columns:
# - score: External fitness score (for your reference)
# - weight: Selection probability (higher = more likely to be chosen as parent)
#           If omitted, defaults to 1.0 (equal probability)
#
# Notes:
# - Weights don't need to sum to 1.0; they're relative probabilities
# - Relative paths are resolved relative to the manifest file's directory

# ============================================================================
# Expected Output
# ============================================================================
# After running, you will find in ga_output/generation_001/:
#   - child_000.csv, child_001.csv, ... child_009.csv (10 children)
#   - immigrant_000.csv, immigrant_001.csv, ... immigrant_004.csv (5 immigrants)
#   - lineage_log.csv (full provenance for all individuals)
#
# If visualization.enabled: true, you will also get:
#   - child_000.png, child_001.png, ... child_009.png
#   - immigrant_000.png, immigrant_001.png, ... immigrant_004.png
#     (comprehensive multi-panel plots with placement, metrics, heatmaps)
#
# Next steps:
#   1. Evaluate all layouts with your external evaluator
#   2. Create new parent manifest from best performers
#   3. Generate next generation (generation_002)
